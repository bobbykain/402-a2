/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"
#define initialize_lexer cmm_grammar_initialize_lexer
extern int yyparse(void);
extern int yylex(void);
int yy_mylinenumber;
extern int initialize_lexer(FILE * inp);
void yyerror(const char *str)
{
  extern char *cmm_grammartext;
  fprintf(stderr,"error: line %d: %s at %s\n",
    yy_mylinenumber + 1, str, cmm_grammartext);
}

Program YY_RESULT_Program_ = 0;
Program pProgram(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

Function YY_RESULT_Function_ = 0;
Function pFunction(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_;
  }
}

Decl YY_RESULT_Decl_ = 0;
Decl pDecl(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Decl_;
  }
}

ListFunction YY_RESULT_ListFunction_ = 0;
ListFunction pListFunction(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunction_;
  }
}

ListStm YY_RESULT_ListStm_ = 0;
ListStm pListStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStm_;
  }
}

ListDecl YY_RESULT_ListDecl_ = 0;
ListDecl pListDecl(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDecl_;
  }
}

ListIdent YY_RESULT_ListIdent_ = 0;
ListIdent pListIdent(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListIdent_;
  }
}

Stm YY_RESULT_Stm_ = 0;
Stm pStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stm_;
  }
}

Exp YY_RESULT_Exp_ = 0;
Exp pExp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}

ListExp YY_RESULT_ListExp_ = 0;
ListExp pListExp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExp_;
  }
}

Type YY_RESULT_Type_ = 0;
Type pType(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}


ListFunction reverseListFunction(ListFunction l)
{
  ListFunction prev = 0;
  ListFunction tmp = 0;
  while (l)
  {
    tmp = l->listfunction_;
    l->listfunction_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStm reverseListStm(ListStm l)
{
  ListStm prev = 0;
  ListStm tmp = 0;
  while (l)
  {
    tmp = l->liststm_;
    l->liststm_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListDecl reverseListDecl(ListDecl l)
{
  ListDecl prev = 0;
  ListDecl tmp = 0;
  while (l)
  {
    tmp = l->listdecl_;
    l->listdecl_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListIdent reverseListIdent(ListIdent l)
{
  ListIdent prev = 0;
  ListIdent tmp = 0;
  while (l)
  {
    tmp = l->listident_;
    l->listident_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListExp reverseListExp(ListExp l)
{
  ListExp prev = 0;
  ListExp tmp = 0;
  while (l)
  {
    tmp = l->listexp_;
    l->listexp_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program program_;
  Function function_;
  Decl decl_;
  ListFunction listfunction_;
  ListStm liststm_;
  ListDecl listdecl_;
  ListIdent listident_;
  Stm stm_;
  Exp exp_;
  ListExp listexp_;
  Type type_;

}

%token _ERROR_
%token _SYMB_0    /*   (   */
%token _SYMB_1    /*   )   */
%token _SYMB_2    /*   {   */
%token _SYMB_3    /*   }   */
%token _SYMB_4    /*   ,   */
%token _SYMB_5    /*   ::   */
%token _SYMB_6    /*   ;   */
%token _SYMB_7    /*   =   */
%token _SYMB_8    /*   <   */
%token _SYMB_9    /*   +   */
%token _SYMB_10    /*   -   */
%token _SYMB_11    /*   *   */
%token _SYMB_12    /*   double   */
%token _SYMB_13    /*   int   */
%token _SYMB_14    /*   return   */
%token _SYMB_15    /*   while   */
%token<string_> _SYMB_16    /*   Ident   */
%token<string_> _SYMB_17    /*   Ident   */

%type <program_> Program
%type <function_> Function
%type <decl_> Decl
%type <listfunction_> ListFunction
%type <liststm_> ListStm
%type <listdecl_> ListDecl
%type <listident_> ListIdent
%type <stm_> Stm
%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2
%type <exp_> Exp3
%type <exp_> Exp4
%type <listexp_> ListExp
%type <type_> Type

%token<string_> _STRING_
%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%start Program
%%
Program : ListFunction { $$ = make_Prog(reverseListFunction($1)); YY_RESULT_Program_= $$; } 
;
Function : Type _SYMB_16 _SYMB_0 ListDecl _SYMB_1 _SYMB_2 ListStm _SYMB_3 { $$ = make_Fun($1, $2, $4, reverseListStm($7)); YY_RESULT_Function_= $$; } 
;
Decl : Type ListIdent { $$ = make_Dec($1, $2); YY_RESULT_Decl_= $$; } 
;
ListFunction : /* empty */ { $$ = 0; YY_RESULT_ListFunction_= $$; } 
  | ListFunction Function { $$ = make_ListFunction($2, $1); YY_RESULT_ListFunction_= $$; }
;
ListStm : /* empty */ { $$ = 0; YY_RESULT_ListStm_= $$; } 
  | ListStm Stm { $$ = make_ListStm($2, $1); YY_RESULT_ListStm_= $$; }
;
ListDecl : /* empty */ { $$ = 0; YY_RESULT_ListDecl_= $$; } 
  | Decl { $$ = make_ListDecl($1, 0); YY_RESULT_ListDecl_= $$; }
  | Decl _SYMB_4 ListDecl { $$ = make_ListDecl($1, $3); YY_RESULT_ListDecl_= $$; }
;
ListIdent : _SYMB_16 { $$ = make_ListIdent($1, 0); YY_RESULT_ListIdent_= $$; } 
  | _SYMB_16 _SYMB_5 ListIdent { $$ = make_ListIdent($1, $3); YY_RESULT_ListIdent_= $$; }
;
Stm : Decl _SYMB_6 { $$ = make_SDecl($1); YY_RESULT_Stm_= $$; } 
  | Exp _SYMB_6 { $$ = make_SExp($1); YY_RESULT_Stm_= $$; }
  | _SYMB_2 ListStm _SYMB_3 { $$ = make_SBlock(reverseListStm($2)); YY_RESULT_Stm_= $$; }
  | _SYMB_15 _SYMB_0 Exp _SYMB_1 Stm { $$ = make_SWhile($3, $5); YY_RESULT_Stm_= $$; }
  | _SYMB_14 Exp _SYMB_6 { $$ = make_SReturn($2); YY_RESULT_Stm_= $$; }
;
Exp : _SYMB_16 _SYMB_7 Exp { $$ = make_EAss($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp1 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp1 : Exp2 _SYMB_8 Exp2 { $$ = make_ELt($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp2 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp2 : Exp2 _SYMB_9 Exp3 { $$ = make_EAdd($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp2 _SYMB_10 Exp3 { $$ = make_ESub($1, $3); YY_RESULT_Exp_= $$; }
  | Exp3 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp3 : Exp3 _SYMB_11 Exp4 { $$ = make_EMul($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp4 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Exp4 : _SYMB_16 _SYMB_0 ListExp _SYMB_1 { $$ = make_Call($1, $3); YY_RESULT_Exp_= $$; } 
  | _SYMB_16 { $$ = make_EVar($1); YY_RESULT_Exp_= $$; }
  | _STRING_ { $$ = make_EStr($1); YY_RESULT_Exp_= $$; }
  | _INTEGER_ { $$ = make_EInt($1); YY_RESULT_Exp_= $$; }
  | _DOUBLE_ { $$ = make_EDouble($1); YY_RESULT_Exp_= $$; }
  | _SYMB_0 Exp _SYMB_1 { $$ = $2; YY_RESULT_Exp_= $$; }
;
ListExp : /* empty */ { $$ = 0; YY_RESULT_ListExp_= $$; } 
  | Exp { $$ = make_ListExp($1, 0); YY_RESULT_ListExp_= $$; }
  | Exp _SYMB_4 ListExp { $$ = make_ListExp($1, $3); YY_RESULT_ListExp_= $$; }
;
Type : _SYMB_13 { $$ = make_TInt(); YY_RESULT_Type_= $$; } 
  | _SYMB_12 { $$ = make_TDouble(); YY_RESULT_Type_= $$; }
;

