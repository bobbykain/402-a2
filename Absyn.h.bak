#ifndef ABSYN_HEADER
#define ABSYN_HEADER

/* C++ Abstract Syntax Interface generated by the BNF Converter.*/

/********************   TypeDef Section    ********************/
typedef int Integer;
typedef char Char;
typedef double Double;
typedef char* String;
typedef char* Ident;
typedef char* Id;
typedef char* Ids;


/********************   Forward Declarations    ********************/

struct ListFunction_;
typedef struct ListFunction_ *ListFunction;
struct ListStm_;
typedef struct ListStm_ *ListStm;
struct ListArg_;
typedef struct ListArg_ *ListArg;
struct Program_;
typedef struct Program_ *Program;
struct Function_;
typedef struct Function_ *Function;
struct Arg_;
typedef struct Arg_ *Arg;
struct Stm_;
typedef struct Stm_ *Stm;
struct Type_;
typedef struct Type_ *Type;
struct Exp_;
typedef struct Exp_ *Exp;


/********************   Abstract Syntax Classes    ********************/

struct Program_
{
  enum { is_Prog } kind;
  union
  {
    struct { ListFunction listfunction_; } prog_;
  } u;
};

Program make_Prog(ListFunction p0);

struct Function_
{
  enum { is_DFunc } kind;
  union
  {
    struct { Id id_; ListArg listarg_; ListStm liststm_; Type type_; } dfunc_;
  } u;
};

Function make_DFunc(Type p0, Id p1, ListArg p2, ListStm p3);

struct Arg_
{
  enum { is_ADecl } kind;
  union
  {
    struct { Id id_; Type type_; } adecl_;
  } u;
};

Arg make_ADecl(Type p0, Id p1);

struct ListFunction_
{
  Function function_;
  ListFunction listfunction_;
};

ListFunction make_ListFunction(Function p1, ListFunction p2);
struct ListStm_
{
  Stm stm_;
  ListStm liststm_;
};

ListStm make_ListStm(Stm p1, ListStm p2);
struct ListArg_
{
  Arg arg_;
  ListArg listarg_;
};

ListArg make_ListArg(Arg p1, ListArg p2);
struct Stm_
{
  enum { is_SExp, is_SReturn } kind;
  union
  {
    struct { Exp exp_; } sexp_;
    struct { Exp exp_; } sreturn_;
  } u;
};

Stm make_SExp(Exp p0);
Stm make_SReturn(Exp p0);

struct Exp_
{
  enum { is_EInt, is_EStr, is_ELs, is_EIden, is_EIdens } kind;
  union
  {
    struct { Integer integer_; } eint_;
    struct { Id id_; } estr_;
    struct { Exp exp_1, exp_2; } els_;
    struct { Id id_; } eiden_;
    struct { Id id_; Ids ids_; } eidens_;
  } u;
};

Exp make_EInt(Integer p0);
Exp make_EStr(Id p0);
Exp make_ELs(Exp p0, Exp p1);
Exp make_EIden(Id p0);
Exp make_EIdens(Ids p0, Id p1);

struct Type_
{
  enum { is_Tint } kind;
  union
  {
  } u;
};

Type make_Tint(void);



#endif
