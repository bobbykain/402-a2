/* -*- c -*- This FLex file was machine-generated by the BNF converter */
%option noyywrap
%{
#define yylval cmm_grammarlval
#define YY_BUFFER_APPEND cmm_grammar_BUFFER_APPEND
#define YY_BUFFER_RESET cmm_grammar_BUFFER_RESET
#define initialize_lexer cmm_grammar_initialize_lexer
#include <string.h>
#include "Parser.h"
#define YY_BUFFER_LENGTH 4096
extern int yy_mylinenumber ;
char YY_PARSED_STRING[YY_BUFFER_LENGTH];
void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
void YY_BUFFER_RESET(void)
{
  int x;
  for(x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>"("      	 return _SYMB_0;
<YYINITIAL>")"      	 return _SYMB_1;
<YYINITIAL>"{"      	 return _SYMB_2;
<YYINITIAL>"}"      	 return _SYMB_3;
<YYINITIAL>","      	 return _SYMB_4;
<YYINITIAL>"::"      	 return _SYMB_5;
<YYINITIAL>";"      	 return _SYMB_6;
<YYINITIAL>"="      	 return _SYMB_7;
<YYINITIAL>"<"      	 return _SYMB_8;
<YYINITIAL>"+"      	 return _SYMB_9;
<YYINITIAL>"-"      	 return _SYMB_10;
<YYINITIAL>"*"      	 return _SYMB_11;
<YYINITIAL>"double"      	 return _SYMB_12;
<YYINITIAL>"int"      	 return _SYMB_13;
<YYINITIAL>"return"      	 return _SYMB_14;
<YYINITIAL>"while"      	 return _SYMB_15;

<YYINITIAL>"//"[^\n]*\n ++yy_mylinenumber; // BNFC: comment "//";
<YYINITIAL>"#"[^\n]*\n ++yy_mylinenumber; // BNFC: comment "#";
<YYINITIAL>"/*" BEGIN COMMENT; // BNFC: comment "/*" "*/";
<COMMENT>"*/" BEGIN YYINITIAL;
<COMMENT>. /* skip */;
<COMMENT>[\n] ++yy_mylinenumber;

<YYINITIAL>{LETTER}({LETTER}|{DIGIT}|\_)*     	 yylval.string_ = strdup(yytext); return _SYMB_16;
<YYINITIAL>{LETTER}*     	 yylval.string_ = strdup(yytext); return _SYMB_16;
<YYINITIAL>"\""      	 BEGIN STRING;
<STRING>\\      	 BEGIN ESCAPED;
<STRING>\"      	 yylval.string_ = strdup(YY_PARSED_STRING); YY_BUFFER_RESET(); BEGIN YYINITIAL; return _STRING_;
<STRING>.      	 YY_BUFFER_APPEND(yytext);
<ESCAPED>n      	 YY_BUFFER_APPEND("\n"); BEGIN STRING;
<ESCAPED>\"      	 YY_BUFFER_APPEND("\""); BEGIN STRING ;
<ESCAPED>\\      	 YY_BUFFER_APPEND("\\"); BEGIN STRING;
<ESCAPED>t       	 YY_BUFFER_APPEND("\t"); BEGIN STRING;
<ESCAPED>.       	 YY_BUFFER_APPEND(yytext); BEGIN STRING;
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval.double_ = atof(yytext); return _DOUBLE_;
<YYINITIAL>{DIGIT}+      	 yylval.int_ = atoi(yytext); return _INTEGER_;
<YYINITIAL>{LETTER}{IDENT}*      	 yylval.string_ = strdup(yytext); return _IDENT_;
\n ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return _ERROR_;
%%
void initialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
