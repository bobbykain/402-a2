
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cpp_grammar;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\004\000\002\005\002\000\002\005\004" +
    "\000\002\006\002\000\002\006\004\000\002\007\002\000" +
    "\002\007\003\000\002\007\005\000\002\010\003\000\002" +
    "\010\005\000\002\011\004\000\002\011\004\000\002\011" +
    "\005\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\003\000\002" +
    "\015\002\000\002\015\003\000\002\015\005\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\ufffd\015\ufffd\001\002\000\004\002" +
    "\057\001\002\000\006\002\000\015\010\001\002\000\006" +
    "\002\ufffc\015\ufffc\001\002\000\004\021\011\001\002\000" +
    "\004\021\uffe5\001\002\000\004\004\012\001\002\000\006" +
    "\005\ufff9\015\010\001\002\000\004\021\054\001\002\000" +
    "\006\005\ufff8\010\051\001\002\000\004\005\016\001\002" +
    "\000\004\006\017\001\002\000\022\004\ufffb\006\ufffb\007" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\001\002" +
    "\000\022\004\024\006\022\007\021\015\010\016\027\017" +
    "\025\020\030\021\026\001\002\000\006\002\uffff\015\uffff" +
    "\001\002\000\022\004\ufffb\006\ufffb\007\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\001\002\000\006\012\046" +
    "\013\037\001\002\000\012\004\024\017\025\020\030\021" +
    "\026\001\002\000\010\005\uffef\012\uffef\013\uffef\001\002" +
    "\000\012\005\uffee\012\uffee\013\uffee\014\042\001\002\000" +
    "\012\004\024\017\025\020\030\021\026\001\002\000\010" +
    "\005\ufff0\012\ufff0\013\ufff0\001\002\000\022\004\ufffa\006" +
    "\ufffa\007\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\001\002\000\010\005\uffeb\012\uffeb\013\uffeb\001\002\000" +
    "\010\005\uffe9\012\uffe9\013\uffe9\001\002\000\004\012\035" +
    "\001\002\000\022\004\ufff4\006\ufff4\007\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\001\002\000\006\012\040" +
    "\013\037\001\002\000\012\004\024\017\025\020\030\021" +
    "\026\001\002\000\022\004\ufff2\006\ufff2\007\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\001\002\000\010\005" +
    "\uffec\012\uffec\013\037\001\002\000\012\004\024\017\025" +
    "\020\030\021\026\001\002\000\010\005\uffea\012\uffea\013" +
    "\037\001\002\000\006\005\045\013\037\001\002\000\010" +
    "\005\uffed\012\uffed\013\uffed\001\002\000\022\004\ufff3\006" +
    "\ufff3\007\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\001\002\000\022\004\024\006\022\007\050\015\010\016" +
    "\027\017\025\020\030\021\026\001\002\000\022\004\ufff1" +
    "\006\ufff1\007\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\001\002\000\006\005\ufff9\015\010\001\002\000\004" +
    "\005\ufff7\001\002\000\010\005\ufffe\010\ufffe\012\ufffe\001" +
    "\002\000\012\005\ufff6\010\ufff6\011\055\012\ufff6\001\002" +
    "\000\004\021\054\001\002\000\010\005\ufff5\010\ufff5\012" +
    "\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\006\003\005\016\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\013\007\014\016\012\001\001\000\004\010\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\017\001\001\000\016\004\033\011\030" +
    "\012\031\013\032\014\022\016\012\001\001\000\002\001" +
    "\001\000\004\006\046\001\001\000\002\001\001\000\010" +
    "\012\031\013\032\014\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\031\013\032\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\031\013\032\014\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\031\013\032" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\033\011\030" +
    "\012\031\013\032\014\022\016\012\001\001\000\002\001" +
    "\001\000\010\004\013\007\051\016\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\055\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public cpp_grammar.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (cpp_grammar.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		cpp_grammar.Absyn.Program start_val = (cpp_grammar.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListFunction 
            {
              cpp_grammar.Absyn.Program RESULT =null;
		cpp_grammar.Absyn.ListFunction p_1 = (cpp_grammar.Absyn.ListFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Function ::= Type _IDENT_ _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 
            {
              cpp_grammar.Absyn.Function RESULT =null;
		cpp_grammar.Absyn.Type p_1 = (cpp_grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		cpp_grammar.Absyn.ListArg p_4 = (cpp_grammar.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Object p_5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp_grammar.Absyn.ListStm p_7 = (cpp_grammar.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.Fun(p_1,p_2,p_4,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Arg ::= Type ListIdent 
            {
              cpp_grammar.Absyn.Arg RESULT =null;
		cpp_grammar.Absyn.Type p_1 = (cpp_grammar.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.ListIdent p_2 = (cpp_grammar.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.Dec(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListFunction ::= 
            {
              cpp_grammar.Absyn.ListFunction RESULT =null;
		 RESULT = new cpp_grammar.Absyn.ListFunction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFunction",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListFunction ::= ListFunction Function 
            {
              cpp_grammar.Absyn.ListFunction RESULT =null;
		cpp_grammar.Absyn.ListFunction p_1 = (cpp_grammar.Absyn.ListFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.Function p_2 = (cpp_grammar.Absyn.Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListFunction",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListStm ::= 
            {
              cpp_grammar.Absyn.ListStm RESULT =null;
		 RESULT = new cpp_grammar.Absyn.ListStm(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListStm ::= ListStm Stm 
            {
              cpp_grammar.Absyn.ListStm RESULT =null;
		cpp_grammar.Absyn.ListStm p_1 = (cpp_grammar.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.Stm p_2 = (cpp_grammar.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStm",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= 
            {
              cpp_grammar.Absyn.ListArg RESULT =null;
		 RESULT = new cpp_grammar.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListArg ::= Arg 
            {
              cpp_grammar.Absyn.ListArg RESULT =null;
		cpp_grammar.Absyn.Arg p_1 = (cpp_grammar.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListArg ::= Arg _SYMB_4 ListArg 
            {
              cpp_grammar.Absyn.ListArg RESULT =null;
		cpp_grammar.Absyn.Arg p_1 = (cpp_grammar.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.ListArg p_3 = (cpp_grammar.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListIdent ::= _IDENT_ 
            {
              cpp_grammar.Absyn.ListIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.ListIdent(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListIdent ::= _IDENT_ _SYMB_5 ListIdent 
            {
              cpp_grammar.Absyn.ListIdent RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.ListIdent p_3 = (cpp_grammar.Absyn.ListIdent)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListIdent",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stm ::= Arg _SYMB_6 
            {
              cpp_grammar.Absyn.Stm RESULT =null;
		cpp_grammar.Absyn.Arg p_1 = (cpp_grammar.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.SDecl(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stm ::= Exp _SYMB_6 
            {
              cpp_grammar.Absyn.Stm RESULT =null;
		cpp_grammar.Absyn.Exp p_1 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stm ::= _SYMB_10 Exp _SYMB_6 
            {
              cpp_grammar.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp_grammar.Absyn.Exp p_2 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.SReturn(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stm ::= _SYMB_2 ListStm _SYMB_3 
            {
              cpp_grammar.Absyn.Stm RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp_grammar.Absyn.ListStm p_2 = (cpp_grammar.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.SBlock(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stm",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp2 ::= _INTEGER_ 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.EInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp2 ::= _STRING_ 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.EStr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp2 ::= _IDENT_ 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.EId(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp2 ::= _SYMB_0 Exp _SYMB_1 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		cpp_grammar.Absyn.Exp p_2 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp1 ::= Exp _SYMB_7 Exp 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		cpp_grammar.Absyn.Exp p_1 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.Exp p_3 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.ELs(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp1 ::= Exp2 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		cpp_grammar.Absyn.Exp p_1 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= _IDENT_ _SYMB_8 Exp 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.Exp p_3 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.EAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= Exp1 
            {
              cpp_grammar.Absyn.Exp RESULT =null;
		cpp_grammar.Absyn.Exp p_1 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ListExp ::= 
            {
              cpp_grammar.Absyn.ListExp RESULT =null;
		 RESULT = new cpp_grammar.Absyn.ListExp(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ListExp ::= Exp 
            {
              cpp_grammar.Absyn.ListExp RESULT =null;
		cpp_grammar.Absyn.Exp p_1 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.ListExp(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ListExp ::= Exp _SYMB_4 ListExp 
            {
              cpp_grammar.Absyn.ListExp RESULT =null;
		cpp_grammar.Absyn.Exp p_1 = (cpp_grammar.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		cpp_grammar.Absyn.ListExp p_3 = (cpp_grammar.Absyn.ListExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExp",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Type ::= _SYMB_9 
            {
              cpp_grammar.Absyn.Type RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new cpp_grammar.Absyn.Tint(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
