// -*- Java -*- This Cup file was machine-generated by BNFC
package cpp_grammar;

action code {:
public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}
:}
parser code {:
  public cpp_grammar.Absyn.Program pProgram() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (cpp_grammar.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal cpp_grammar.Absyn.Program Program;
nonterminal cpp_grammar.Absyn.Function Function;
nonterminal cpp_grammar.Absyn.Arg Arg;
nonterminal cpp_grammar.Absyn.ListFunction ListFunction;
nonterminal cpp_grammar.Absyn.ListStm ListStm;
nonterminal cpp_grammar.Absyn.ListArg ListArg;
nonterminal cpp_grammar.Absyn.ListExp ListExp;
nonterminal cpp_grammar.Absyn.ListIdent ListIdent;
nonterminal cpp_grammar.Absyn.Stm Stm;
nonterminal cpp_grammar.Absyn.Exp Exp2;
nonterminal cpp_grammar.Absyn.Exp Exp1;
nonterminal cpp_grammar.Absyn.Exp Exp;
nonterminal cpp_grammar.Absyn.Type Type;

terminal _SYMB_0;    //   (
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   {
terminal _SYMB_3;    //   }
terminal _SYMB_4;    //   ,
terminal _SYMB_5;    //   ::
terminal _SYMB_6;    //   ;
terminal _SYMB_7;    //   <<
terminal _SYMB_8;    //   =
terminal _SYMB_9;    //   int
terminal _SYMB_10;    //   return

terminal String _STRING_;

terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListFunction:p_1  {: RESULT = new cpp_grammar.Absyn.Prog(p_1); :} 
;
Function ::= Type:p_1 _IDENT_:p_2 _SYMB_0:p_3 ListArg:p_4 _SYMB_1:p_5 _SYMB_2:p_6 ListStm:p_7 _SYMB_3:p_8  {: RESULT = new cpp_grammar.Absyn.DFunc(p_1,p_2,p_4,p_7); :} 
;
Arg ::= Type:p_1 ListIdent:p_2  {: RESULT = new cpp_grammar.Absyn.Dec(p_1,p_2); :} 
;
ListFunction ::=  /* empty */  {: RESULT = new cpp_grammar.Absyn.ListFunction(); :} 
  | ListFunction:p_1 Function:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListStm ::=  /* empty */  {: RESULT = new cpp_grammar.Absyn.ListStm(); :} 
  | ListStm:p_1 Stm:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
ListArg ::=  /* empty */  {: RESULT = new cpp_grammar.Absyn.ListArg(); :} 
  | Arg:p_1  {: RESULT = new cpp_grammar.Absyn.ListArg(); RESULT.addLast(p_1); :}
  | Arg:p_1 _SYMB_4:p_2 ListArg:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListExp ::=  /* empty */  {: RESULT = new cpp_grammar.Absyn.ListExp(); :} 
  | Exp:p_1  {: RESULT = new cpp_grammar.Absyn.ListExp(); RESULT.addLast(p_1); :}
  | Exp:p_1 _SYMB_4:p_2 ListExp:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
ListIdent ::= _IDENT_:p_1  {: RESULT = new cpp_grammar.Absyn.ListIdent(); RESULT.addLast(p_1); :} 
  | _IDENT_:p_1 _SYMB_5:p_2 ListIdent:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Stm ::= Arg:p_1 _SYMB_6:p_2  {: RESULT = new cpp_grammar.Absyn.SDecl(p_1); :} 
  | Exp:p_1 _SYMB_6:p_2  {: RESULT = new cpp_grammar.Absyn.SExp(p_1); :}
  | _SYMB_10:p_1 Exp:p_2 _SYMB_6:p_3  {: RESULT = new cpp_grammar.Absyn.SReturn(p_2); :}
  | _SYMB_2:p_1 ListStm:p_2 _SYMB_3:p_3  {: RESULT = new cpp_grammar.Absyn.SBlock(p_2); :}
;
Exp2 ::= _INTEGER_:p_1  {: RESULT = new cpp_grammar.Absyn.EInt(p_1); :} 
  | _STRING_:p_1  {: RESULT = new cpp_grammar.Absyn.EStr(p_1); :}
  | _IDENT_:p_1  {: RESULT = new cpp_grammar.Absyn.EId(p_1); :}
  | _SYMB_0:p_1 Exp:p_2 _SYMB_1:p_3  {: RESULT = p_2; :}
;
Exp1 ::= Exp:p_1 _SYMB_7:p_2 Exp:p_3  {: RESULT = new cpp_grammar.Absyn.ELs(p_1,p_3); :} 
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp ::= _IDENT_:p_1 _SYMB_8:p_2 Exp1:p_3  {: RESULT = new cpp_grammar.Absyn.EAss(p_1,p_3); :} 
  | Exp1:p_1  {: RESULT = p_1; :}
;
Type ::= _SYMB_9:p_1  {: RESULT = new cpp_grammar.Absyn.Tint(); :} 
;

