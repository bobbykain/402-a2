/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "Absyn.h"
#define initialize_lexer cpp_grammar_initialize_lexer
extern int yyparse(void);
extern int yylex(void);
int yy_mylinenumber;
extern int initialize_lexer(FILE * inp);
void yyerror(const char *str)
{
  extern char *cpp_grammartext;
  fprintf(stderr,"error: line %d: %s at %s\n",
    yy_mylinenumber + 1, str, cpp_grammartext);
}

Program YY_RESULT_Program_ = 0;
Program pProgram(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Program_;
  }
}

Function YY_RESULT_Function_ = 0;
Function pFunction(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Function_;
  }
}

Arg YY_RESULT_Arg_ = 0;
Arg pArg(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Arg_;
  }
}

ListFunction YY_RESULT_ListFunction_ = 0;
ListFunction pListFunction(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunction_;
  }
}

ListStm YY_RESULT_ListStm_ = 0;
ListStm pListStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStm_;
  }
}

ListArg YY_RESULT_ListArg_ = 0;
ListArg pListArg(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListArg_;
  }
}

Stm YY_RESULT_Stm_ = 0;
Stm pStm(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Stm_;
  }
}

Exp YY_RESULT_Exp_ = 0;
Exp pExp(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Exp_;
  }
}

Type YY_RESULT_Type_ = 0;
Type pType(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

QualId YY_RESULT_QualId_ = 0;
QualId pQualId(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_QualId_;
  }
}


ListFunction reverseListFunction(ListFunction l)
{
  ListFunction prev = 0;
  ListFunction tmp = 0;
  while (l)
  {
    tmp = l->listfunction_;
    l->listfunction_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStm reverseListStm(ListStm l)
{
  ListStm prev = 0;
  ListStm tmp = 0;
  while (l)
  {
    tmp = l->liststm_;
    l->liststm_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListArg reverseListArg(ListArg l)
{
  ListArg prev = 0;
  ListArg tmp = 0;
  while (l)
  {
    tmp = l->listarg_;
    l->listarg_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Program program_;
  Function function_;
  Arg arg_;
  ListFunction listfunction_;
  ListStm liststm_;
  ListArg listarg_;
  Stm stm_;
  Exp exp_;
  Type type_;
  QualId qualid_;

}

%token _ERROR_
%token _SYMB_0    /*   (   */
%token _SYMB_1    /*   )   */
%token _SYMB_2    /*   {   */
%token _SYMB_3    /*   }   */
%token _SYMB_4    /*   ,   */
%token _SYMB_5    /*   ;   */
%token _SYMB_6    /*   "   */
%token _SYMB_7    /*   <<   */
%token _SYMB_8    /*   ::   */
%token _SYMB_9    /*   int   */
%token _SYMB_10    /*   return   */
%token<string_> _SYMB_11    /*   Id   */
%token<string_> _SYMB_12    /*   Ids   */

%type <program_> Program
%type <function_> Function
%type <arg_> Arg
%type <listfunction_> ListFunction
%type <liststm_> ListStm
%type <listarg_> ListArg
%type <stm_> Stm
%type <exp_> Exp15
%type <exp_> Exp9
%type <type_> Type
%type <exp_> Exp
%type <exp_> Exp1
%type <exp_> Exp2
%type <exp_> Exp3
%type <exp_> Exp4
%type <exp_> Exp5
%type <exp_> Exp6
%type <exp_> Exp7
%type <exp_> Exp8
%type <exp_> Exp10
%type <exp_> Exp11
%type <exp_> Exp12
%type <exp_> Exp13
%type <exp_> Exp14
%type <qualid_> QualId

%token<int_> _INTEGER_
%token<string_> _IDENT_

%start Program
%%
Program : ListFunction { $$ = make_Prog(reverseListFunction($1)); YY_RESULT_Program_= $$; } 
;
Function : Type _SYMB_11 _SYMB_0 ListArg _SYMB_1 _SYMB_2 ListStm _SYMB_3 { $$ = make_DFunc($1, $2, $4, reverseListStm($7)); YY_RESULT_Function_= $$; } 
;
Arg : Type _SYMB_11 { $$ = make_ADecl($1, $2); YY_RESULT_Arg_= $$; } 
;
ListFunction : /* empty */ { $$ = 0; YY_RESULT_ListFunction_= $$; } 
  | ListFunction Function { $$ = make_ListFunction($2, $1); YY_RESULT_ListFunction_= $$; }
;
ListStm : /* empty */ { $$ = 0; YY_RESULT_ListStm_= $$; } 
  | ListStm Stm { $$ = make_ListStm($2, $1); YY_RESULT_ListStm_= $$; }
;
ListArg : /* empty */ { $$ = 0; YY_RESULT_ListArg_= $$; } 
  | Arg { $$ = make_ListArg($1, 0); YY_RESULT_ListArg_= $$; }
  | Arg _SYMB_4 ListArg { $$ = make_ListArg($1, $3); YY_RESULT_ListArg_= $$; }
;
Stm : Exp _SYMB_5 { $$ = make_SExp($1); YY_RESULT_Stm_= $$; } 
  | _SYMB_10 Exp _SYMB_5 { $$ = make_SReturn($2); YY_RESULT_Stm_= $$; }
;
Exp15 : _INTEGER_ { $$ = make_EInt($1); YY_RESULT_Exp_= $$; } 
  | _SYMB_6 _SYMB_11 _SYMB_6 { $$ = make_EStr($2); YY_RESULT_Exp_= $$; }
  | _SYMB_0 Exp _SYMB_1 { $$ = $2; YY_RESULT_Exp_= $$; }
;
Exp9 : Exp9 _SYMB_7 Exp10 { $$ = make_ELs($1, $3); YY_RESULT_Exp_= $$; } 
  | Exp10 { $$ = $1; YY_RESULT_Exp_= $$; }
;
Type : _SYMB_9 { $$ = make_Tint(); YY_RESULT_Type_= $$; } 
;
Exp : Exp1 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp1 : Exp2 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp2 : Exp3 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp3 : Exp4 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp4 : Exp5 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp5 : Exp6 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp6 : Exp7 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp7 : Exp8 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp8 : Exp9 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp10 : Exp11 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp11 : Exp12 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp12 : Exp13 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp13 : Exp14 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
Exp14 : Exp15 { $$ = $1; YY_RESULT_Exp_= $$; } 
;
QualId : _IDENT_ { $$ = make_Iden($1); YY_RESULT_QualId_= $$; } 
  | QualId _SYMB_8 _IDENT_ { $$ = make_Idens($1, $3); YY_RESULT_QualId_= $$; }
;

